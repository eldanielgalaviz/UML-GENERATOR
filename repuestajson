{
    "backend": {
        "modules": [
            {
                "name": "AuthModule",
                "files": [
                    {
                        "path": "src/auth/auth.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Usuario } from '../usuario/entities/usuario.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [ConfigModule,\n    TypeOrmModule.forFeature([\n      Usuario\n    ]),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: '1h',\n        },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService, JwtModule]\n})\nexport class AuthModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/auth.service.ts",
                        "content": "import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Usuario } from '../usuario/entities/usuario.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    @InjectRepository(Usuario)\n    private readonly usuarioRepository: Repository<Usuario>,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register(registerDto: RegisterDto): Promise<Usuario> {\n    const { password, ...userData } = registerDto;\n\n    const usuario = this.usuarioRepository.create({\n      ...userData,\n      password: bcrypt.hashSync(password, 10),\n    });\n\n    return this.usuarioRepository.save(usuario);\n  }\n\n  async login(loginDto: LoginDto) {\n    const { email, password } = loginDto;\n\n    const usuario = await this.usuarioRepository.findOne({\n      where: { email },\n      select: ['email', 'password', 'id', 'nombre']\n    });\n\n    if (!usuario) {\n      throw new UnauthorizedException('Credenciales incorrectas');\n    }\n\n    if (!bcrypt.compareSync(password, usuario.password)) {\n      throw new UnauthorizedException('Credenciales incorrectas');\n    }\n\n    const payload = { id: usuario.id, email: usuario.email, nombre: usuario.nombre };\n    const token = this.jwtService.sign(payload);\n\n    return {\n      token: token,\n      user: {\n        id: usuario.id,\n        email: usuario.email,\n        nombre: usuario.nombre,\n      }\n    };\n  }\n\n  async validateUser(id: number): Promise<Usuario> {\n    const usuario = await this.usuarioRepository.findOneBy({ id });\n\n    if (!usuario) {\n      throw new UnauthorizedException('Usuario no encontrado');\n    }\n\n    delete usuario.password;\n    return usuario;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/auth.controller.ts",
                        "content": "import { Controller, Post, Body, HttpCode, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/dto/login.dto.ts",
                        "content": "import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/dto/register.dto.ts",
                        "content": "import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @IsNotEmpty()\n  nombre: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/strategies/jwt.strategy.ts",
                        "content": "import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from '../auth.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: JwtPayload) {\n    const { id } = payload;\n\n    const user = await this.authService.validateUser(id);\n\n    return user;\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/auth/interfaces/jwt-payload.interface.ts",
                        "content": "export interface JwtPayload {\n  id: number;\n  email: string;\n  nombre: string;\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "UsersModule",
                "files": [
                    {
                        "path": "src/users/users.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { JefeDeGrupo } from './entities/jefe-de-grupo.entity';\nimport { Profesor } from './entities/profesor.entity';\nimport { Alumno } from './entities/alumno.entity';\nimport { Horario } from '../horarios/entities/horario.entity';\nimport { Asistencia } from '../asistencias/entities/asistencia.entity';\nimport { Actividad } from '../actividades/entities/actividad.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, JefeDeGrupo, Profesor, Alumno, Horario, Asistencia, Actividad])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/users.service.ts",
                        "content": "import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { JefeDeGrupo } from './entities/jefe-de-grupo.entity';\nimport { Profesor } from './entities/profesor.entity';\nimport { Alumno } from './entities/alumno.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository<User>,\n    @InjectRepository(JefeDeGrupo) private jefeDeGrupoRepository: Repository<JefeDeGrupo>,\n    @InjectRepository(Profesor) private profesorRepository: Repository<Profesor>,\n    @InjectRepository(Alumno) private alumnoRepository: Repository<Alumno>,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise<User> {\n    const user = this.userRepository.create(createUserDto);\n    return this.userRepository.save(user);\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userRepository.find();\n  }\n\n  async findOne(id: number): Promise<User> {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException(`User with ID \"${id}\" not found`);\n    }\n    return user;\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto): Promise<User> {\n    const user = await this.findOne(id);\n    this.userRepository.merge(user, updateUserDto);\n    return this.userRepository.save(user);\n  }\n\n  async remove(id: number): Promise<void> {\n    const user = await this.findOne(id);\n    await this.userRepository.remove(user);\n  }\n\n  async createJefeDeGrupo(createUserDto: CreateUserDto): Promise<JefeDeGrupo> {\n    const jefeDeGrupo = this.jefeDeGrupoRepository.create(createUserDto);\n    return this.jefeDeGrupoRepository.save(jefeDeGrupo);\n  }\n\n  async createProfesor(createUserDto: CreateUserDto): Promise<Profesor> {\n    const profesor = this.profesorRepository.create(createUserDto);\n    return this.profesorRepository.save(profesor);\n  }\n\n  async createAlumno(createUserDto: CreateUserDto): Promise<Alumno> {\n    const alumno = this.alumnoRepository.create(createUserDto);\n    return this.alumnoRepository.save(alumno);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/users.controller.ts",
                        "content": "import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id);\n  }\n\n  @Post('/jefe-de-grupo')\n  createJefeDeGrupo(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createJefeDeGrupo(createUserDto);\n  }\n\n  @Post('/profesor')\n  createProfesor(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createProfesor(createUserDto);\n  }\n\n  @Post('/alumno')\n  createAlumno(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createAlumno(createUserDto);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/dto/create-user.dto.ts",
                        "content": "import { IsString, IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  nombre: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/dto/update-user.dto.ts",
                        "content": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/entities/user.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\nimport { Alumno } from './alumno.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column({\n    unique: true,\n  })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @OneToMany(() => JefeDeGrupo, (jefeDeGrupo) => jefeDeGrupo.user)\n  jefeDeGrupo: JefeDeGrupo[];\n\n  @OneToMany(() => Profesor, (profesor) => profesor.user)\n  profesor: Profesor[];\n\n  @OneToMany(() => Alumno, (alumno) => alumno.user)\n  alumno: Alumno[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/entities/jefe-de-grupo.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class JefeDeGrupo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => User, (user) => user.jefeDeGrupo)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  // Additional fields and methods specific to JefeDeGrupo can be added here\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/entities/profesor.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Profesor {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => User, (user) => user.profesor)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  // Additional fields and methods specific to Profesor can be added here\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/users/entities/alumno.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Alumno {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => User, (user) => user.alumno)\n  @JoinColumn({ name: 'userId' })\n  user: User;\n\n  // Additional fields and methods specific to Alumno can be added here\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "ProjectsModule",
                "files": [
                    {
                        "path": "src/projects/projects.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ProjectsController } from './projects.controller';\nimport { ProjectsService } from './projects.service';\nimport { Usuario } from './entities/usuario.entity';\nimport { JefeDeGrupo } from './entities/jefe-de-grupo.entity';\nimport { Profesor } from './entities/profesor.entity';\nimport { Alumno } from './entities/alumno.entity';\nimport { Horario } from './entities/horario.entity';\nimport { Asistencia } from './entities/asistencia.entity';\nimport { Actividad } from './entities/actividad.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Usuario, JefeDeGrupo, Profesor, Alumno, Horario, Asistencia, Actividad])],\n  controllers: [ProjectsController],\n  providers: [ProjectsService],\n})\nexport class ProjectsModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/projects.controller.ts",
                        "content": "import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ProjectsService } from './projects.service';\nimport { CreateUsuarioDto } from './dto/create-usuario.dto';\nimport { UpdateUsuarioDto } from './dto/update-usuario.dto';\n\n@Controller('projects')\nexport class ProjectsController {\n  constructor(private readonly projectsService: ProjectsService) {}\n\n  @Post('usuarios')\n  create(@Body() createUsuarioDto: CreateUsuarioDto) {\n    return this.projectsService.createUsuario(createUsuarioDto);\n  }\n\n  @Get('usuarios')\n  findAll() {\n    return this.projectsService.findAllUsuarios();\n  }\n\n  @Get('usuarios/:id')\n  findOne(@Param('id') id: string) {\n    return this.projectsService.findUsuarioById(+id);\n  }\n\n  @Patch('usuarios/:id')\n  update(@Param('id') id: string, @Body() updateUsuarioDto: UpdateUsuarioDto) {\n    return this.projectsService.updateUsuario(+id, updateUsuarioDto);\n  }\n\n  @Delete('usuarios/:id')\n  remove(@Param('id') id: string) {\n    return this.projectsService.removeUsuario(+id);\n  }\n\n  @Post('horarios')\n  createHorario(@Body() createHorarioDto: any) { // Replace any with DTO\n      return this.projectsService.createHorario(createHorarioDto);\n  }\n\n  @Get('horarios')\n  findAllHorarios() {\n      return this.projectsService.findAllHorarios();\n  }\n\n  @Get('horarios/:id')\n  findHorario(@Param('id') id: string) {\n      return this.projectsService.findHorarioById(+id);\n  }\n  \n  // Add endpoints for other entities (JefeDeGrupo, Profesor, Alumno, Asistencia, Actividad)\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/projects.service.ts",
                        "content": "import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUsuarioDto } from './dto/create-usuario.dto';\nimport { UpdateUsuarioDto } from './dto/update-usuario.dto';\nimport { Usuario } from './entities/usuario.entity';\nimport { Horario } from './entities/horario.entity';\n\n@Injectable()\nexport class ProjectsService {\n  constructor(\n    @InjectRepository(Usuario) private usuarioRepository: Repository<Usuario>,\n    @InjectRepository(Horario) private horarioRepository: Repository<Horario>,\n  ) {}\n\n  async createUsuario(createUsuarioDto: CreateUsuarioDto): Promise<Usuario> {\n    const usuario = this.usuarioRepository.create(createUsuarioDto);\n    return this.usuarioRepository.save(usuario);\n  }\n\n  async findAllUsuarios(): Promise<Usuario[]> {\n    return this.usuarioRepository.find();\n  }\n\n  async findUsuarioById(id: number): Promise<Usuario> {\n    const usuario = await this.usuarioRepository.findOneBy({ id });\n    if (!usuario) {\n      throw new NotFoundException(`Usuario with ID \"${id}\" not found`);\n    }\n    return usuario;\n  }\n\n  async updateUsuario(id: number, updateUsuarioDto: UpdateUsuarioDto): Promise<Usuario> {\n    const usuario = await this.findUsuarioById(id);\n    Object.assign(usuario, updateUsuarioDto);\n    return this.usuarioRepository.save(usuario);\n  }\n\n  async removeUsuario(id: number): Promise<void> {\n    const usuario = await this.findUsuarioById(id);\n    await this.usuarioRepository.remove(usuario);\n  }\n\n  async createHorario(createHorarioDto: any): Promise<Horario> {\n      const horario = this.horarioRepository.create(createHorarioDto);\n      return this.horarioRepository.save(horario);\n  }\n\n  async findAllHorarios(): Promise<Horario[]> {\n      return this.horarioRepository.find();\n  }\n\n  async findHorarioById(id: number): Promise<Horario> {\n      const horario = await this.horarioRepository.findOneBy({ id });\n      if (!horario) {\n          throw new NotFoundException(`Horario with ID \"${id}\" not found`);\n      }\n      return horario;\n  }\n\n  // Implement methods for JefeDeGrupo, Profesor, Alumno, Asistencia, Actividad\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/dto/create-usuario.dto.ts",
                        "content": "import { IsString, IsEmail, MinLength } from 'class-validator';\n\nexport class CreateUsuarioDto {\n  @IsString()\n  nombre: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @MinLength(6)\n  password: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/dto/update-usuario.dto.ts",
                        "content": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUsuarioDto } from './create-usuario.dto';\n\nexport class UpdateUsuarioDto extends PartialType(CreateUsuarioDto) {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/usuario.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\nimport { Alumno } from './alumno.entity';\n\n@Entity()\nexport class Usuario {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column({\n    unique: true,\n  })\n  email: string;\n\n  @Column()\n  password: string;\n\n  @OneToMany(() => JefeDeGrupo, (jefeDeGrupo) => jefeDeGrupo.usuario)\n  jefesDeGrupo: JefeDeGrupo[];\n\n  @OneToMany(() => Profesor, (profesor) => profesor.usuario)\n  profesores: Profesor[];\n\n  @OneToMany(() => Alumno, (alumno) => alumno.usuario)\n  alumnos: Alumno[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/jefe-de-grupo.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { Usuario } from './usuario.entity';\nimport { Horario } from './horario.entity';\nimport { Asistencia } from './asistencia.entity';\nimport { Actividad } from './actividad.entity';\n\n@Entity()\nexport class JefeDeGrupo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Usuario, (usuario) => usuario.jefesDeGrupo)\n  @JoinColumn({name: 'usuarioId'})\n  usuario: Usuario;\n\n  @OneToMany(() => Horario, (horario) => horario.jefeDeGrupo)\n  horarios: Horario[];\n\n  @OneToMany(() => Asistencia, (asistencia) => asistencia.jefeDeGrupo)\n  asistencias: Asistencia[];\n\n  @OneToMany(() => Actividad, (actividad) => actividad.jefeDeGrupo)\n  actividades: Actividad[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/profesor.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn, OneToMany } from 'typeorm';\nimport { Usuario } from './usuario.entity';\nimport { Asistencia } from './asistencia.entity';\nimport { Horario } from './horario.entity';\n\n@Entity()\nexport class Profesor {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Usuario, (usuario) => usuario.profesores)\n  @JoinColumn({name: 'usuarioId'})\n  usuario: Usuario;\n\n  @OneToMany(() => Asistencia, (asistencia) => asistencia.profesor)\n  asistencias: Asistencia[];\n\n  @OneToMany(() => Horario, (horario) => horario.profesor)\n  horarios: Horario[];\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/alumno.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, ManyToOne, JoinColumn, OneToOne, JoinTable } from 'typeorm';\nimport { Usuario } from './usuario.entity';\nimport { Horario } from './horario.entity';\n\n@Entity()\nexport class Alumno {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => Usuario, (usuario) => usuario.alumnos)\n  @JoinColumn({name: 'usuarioId'})\n  usuario: Usuario;\n\n  @OneToOne(() => Horario)\n  @JoinTable()\n  horario: Horario;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/horario.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\n\n@Entity()\nexport class Horario {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  grupo: string;\n\n  @Column()\n  clase: string;\n\n  @Column()\n  horaInicio: string;  // Storing time as string for simplicity\n\n  @Column()\n  horaFin: string;    // Storing time as string for simplicity\n\n  @ManyToOne(() => JefeDeGrupo, (jefeDeGrupo) => jefeDeGrupo.horarios)\n  @JoinColumn({name: 'jefeDeGrupoId'})\n  jefeDeGrupo: JefeDeGrupo;\n\n    @ManyToOne(() => Profesor, (profesor) => profesor.horarios)\n    @JoinColumn({name: 'profesorId'})\n    profesor: Profesor;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/asistencia.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\nimport { Profesor } from './profesor.entity';\n\n@Entity()\nexport class Asistencia {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  fecha: Date;\n\n  @Column()\n  presente: boolean;\n\n  @ManyToOne(() => JefeDeGrupo, (jefeDeGrupo) => jefeDeGrupo.asistencias)\n  @JoinColumn({name: 'jefeDeGrupoId'})\n  jefeDeGrupo: JefeDeGrupo;\n\n  @ManyToOne(() => Profesor, (profesor) => profesor.asistencias)\n  @JoinColumn({name: 'profesorId'})\n  profesor: Profesor;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/projects/entities/actividad.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\nimport { JefeDeGrupo } from './jefe-de-grupo.entity';\n\n@Entity()\nexport class Actividad {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  nombre: string;\n\n  @Column()\n  descripcion: string;\n\n  @Column()\n  fecha: Date;\n\n  @ManyToOne(() => JefeDeGrupo, (jefeDeGrupo) => jefeDeGrupo.actividades)\n  @JoinColumn({name: 'jefeDeGrupoId'})\n  jefeDeGrupo: JefeDeGrupo;\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "TasksModule",
                "files": [
                    {
                        "path": "src/tasks/tasks.module.ts",
                        "content": "import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { Task } from './task.entity';\nimport { UsuarioModule } from '../usuario/usuario.module';\nimport { HorarioModule } from '../horario/horario.module';\nimport { AsistenciaModule } from '../asistencia/asistencia.module';\nimport { ActividadModule } from '../actividad/actividad.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task]), UsuarioModule, HorarioModule, AsistenciaModule, ActividadModule],\n  controllers: [TasksController],\n  providers: [TasksService],\n  exports: [TasksService],\n})\nexport class TasksModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/tasks.controller.ts",
                        "content": "import { Controller, Get, Post, Body, Param, Delete, Patch, UseGuards } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('tasks')\n@UseGuards(AuthGuard('jwt'))\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @Post()\n  create(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.create(createTaskDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.tasksService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.tasksService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    return this.tasksService.update(+id, updateTaskDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.tasksService.remove(+id);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/tasks.service.ts",
                        "content": "import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Task } from './task.entity';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(Task)\n    private tasksRepository: Repository<Task>,\n  ) {}\n\n  async create(createTaskDto: CreateTaskDto): Promise<Task> {\n    const task = this.tasksRepository.create(createTaskDto);\n    return this.tasksRepository.save(task);\n  }\n\n  async findAll(): Promise<Task[]> {\n    return this.tasksRepository.find();\n  }\n\n  async findOne(id: number): Promise<Task> {\n    const task = await this.tasksRepository.findOneBy({id});\n    if (!task) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`);\n    }\n    return task;\n  }\n\n  async update(id: number, updateTaskDto: UpdateTaskDto): Promise<Task> {\n    const task = await this.findOne(id);\n\n    Object.assign(task, updateTaskDto);\n\n    return this.tasksRepository.save(task);\n  }\n\n  async remove(id: number): Promise<void> {\n    const task = await this.findOne(id);\n    await this.tasksRepository.remove(task);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/task.entity.ts",
                        "content": "import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column({ default: false })\n  completed: boolean;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/dto/create-task.dto.ts",
                        "content": "import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/tasks/dto/update-task.dto.ts",
                        "content": "import { IsOptional, IsString, IsBoolean } from 'class-validator';\n\nexport class UpdateTaskDto {\n  @IsOptional()\n  @IsString()\n  title?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  completed?: boolean;\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            }
        ],
        "commonFiles": [
            {
                "path": "package.json",
                "content": "{\n  \"name\": \"nestjs-backend\",\n  \"version\": \"0.0.1\",\n  \"description\": \"NestJS backend for school management system\",\n  \"author\": \"\",\n  \"private\": true,\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"nest build\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"start\": \"nest start\",\n    \"start:dev\": \"nest start --watch\",\n    \"start:debug\": \"nest start --debug --watch\",\n    \"start:prod\": \"node dist/main\",\n    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:cov\": \"jest --coverage\",\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\"\n  },\n  \"dependencies\": {\n    \"@nestjs/common\": \"^10.0.0\",\n    \"@nestjs/config\": \"^3.1.1\",\n    \"@nestjs/core\": \"^10.0.0\",\n    \"@nestjs/platform-express\": \"^10.0.0\",\n    \"@nestjs/typeorm\": \"^10.0.1\",\n    \"class-transformer\": \"^0.5.1\",\n    \"class-validator\": \"^0.14.0\",\n    \"pg\": \"^8.11.3\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"rxjs\": \"^7.8.1\",\n    \"typeorm\": \"^0.3.17\"\n  },\n  \"devDependencies\": {\n    \"@nestjs/cli\": \"^10.0.0\",\n    \"@nestjs/schematics\": \"^10.0.0\",\n    \"@nestjs/testing\": \"^10.0.0\",\n    \"@types/express\": \"^4.17.17\",\n    \"@types/jest\": \"^29.5.2\",\n    \"@types/node\": \"^20.3.1\",\n    \"@types/supertest\": \"^2.0.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"eslint\": \"^8.42.0\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"jest\": \"^29.5.0\",\n    \"prettier\": \"^3.0.0\",\n    \"source-map-support\": \"^0.5.21\",\n    \"supertest\": \"^6.3.3\",\n    \"ts-jest\": \"^29.1.0\",\n    \"ts-loader\": \"^9.4.3\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"typescript\": \"^5.1.3\"\n  },\n  \"jest\": {\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\",\n      \"ts\"\n    ],\n    \"rootDir\": \"src\",\n    \"testRegex\": \".*\\\\.spec\\\\.ts$\",\n    \"transform\": {\n      \"^.+\\\\.ts$\": \"ts-jest\"\n    },\n    \"collectCoverageFrom\": [\n      \"**/*\\\\.ts\",\n      \"!**/*\\\\.module\\\\.ts\"\n    ],\n    \"coverageDirectory\": \"../coverage\",\n    \"testEnvironment\": \"node\"\n  }\n}\n",
                "type": "json"
            },
            {
                "path": "tsconfig.json",
                "content": "{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"declaration\": true,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"es2017\",\n    \"sourceMap\": true,\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": false,\n    \"noImplicitAny\": false,\n    \"strictBindCallApply\": false,\n    \"forceConsistentCasingInFileNames\": false,\n    \"noFallthroughCasesInSwitch\": false,\n    \"moduleResolution\": \"node\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n",
                "type": "json"
            },
            {
                "path": ".env",
                "content": "# Environment variables\n\nNODE_ENV=development\nPORT=3000\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\nDATABASE_USER=postgres\nDATABASE_PASSWORD=postgres\nDATABASE_NAME=school_management\n",
                "type": "text"
            },
            {
                "path": "nest-cli.json",
                "content": "{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\"\n}\n",
                "type": "json"
            },
            {
                "path": "src/main.ts",
                "content": "import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n",
                "type": "typescript"
            }
        ],
        "cliCommands": [
            "npm install",
            "npm install -g @nestjs/cli",
            "nest new project-name",
            "npm run start:dev",
            "npm run build",
            "npm run start:prod",
            "npm install --save @nestjs/typeorm typeorm pg class-validator class-transformer @nestjs/config",
            "npm install --save-dev @types/node ts-node"
        ]
    },
    "frontend": {
        "modules": [
            {
                "name": "AppModule",
                "files": [
                    {
                        "path": "src/app/app.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ProjectsModule } from './projects/projects.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { AuthInterceptor } from './core/interceptors/auth.interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    CoreModule,\n    SharedModule,\n    AuthModule,\n    ProjectsModule,\n    TasksModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/app-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './core/guards/auth.guard';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/projects', pathMatch: 'full' },\n  { path: 'projects', loadChildren: () => import('./projects/projects.module').then(m => m.ProjectsModule), canActivate: [AuthGuard] },\n  { path: 'tasks', loadChildren: () => import('./tasks/tasks.module').then(m => m.TasksModule), canActivate: [AuthGuard] },\n  { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/app.component.ts",
                        "content": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'angular-app';\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/app.component.html",
                        "content": "<mat-toolbar color=\"primary\">\n  <span>My App</span>\n  <span class=\"spacer\"></span>\n  <a mat-button routerLink=\"/projects\" routerLinkActive=\"active\">Projects</a>\n  <a mat-button routerLink=\"/tasks\" routerLinkActive=\"active\">Tasks</a>\n  <a mat-button routerLink=\"/auth/login\" routerLinkActive=\"active\">Login</a>\n  <a mat-button routerLink=\"/auth/register\" routerLinkActive=\"active\">Register</a>\n</mat-toolbar>\n<router-outlet></router-outlet>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/app.component.scss",
                        "content": ".spacer {\n  flex: 1 1 auto;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/core/core.module.ts",
                        "content": "import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: []\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule?: CoreModule) {\n    if (parentModule) {\n      throw new Error('CoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/shared.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from './material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SharedModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/material.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  exports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatCardModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule\n  ]\n})\nexport class MaterialModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/auth.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent\n  ],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    SharedModule\n  ]\n})\nexport class AuthModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/projects.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProjectsRoutingModule } from './projects-routing.module';\nimport { ProjectListComponent } from './project-list/project-list.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    ProjectListComponent\n  ],\n  imports: [\n    CommonModule,\n    ProjectsRoutingModule,\n    SharedModule\n  ]\n})\nexport class ProjectsModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/tasks.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TasksRoutingModule } from './tasks-routing.module';\nimport { TaskListComponent } from './task-list/task-list.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    TaskListComponent\n  ],\n  imports: [\n    CommonModule,\n    TasksRoutingModule,\n    SharedModule\n  ]\n})\nexport class TasksModule { }\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "CoreModule",
                "files": [
                    {
                        "path": "src/app/core/core.module.ts",
                        "content": "import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthService } from './services/auth.service';\nimport { HorarioService } from './services/horario.service';\nimport { AsistenciaService } from './services/asistencia.service';\nimport { AuthGuard } from './guards/auth.guard';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    AuthService,\n    HorarioService,\n    AsistenciaService,\n    AuthGuard,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'CoreModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/auth.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\ninterface AuthResponse {\n  token: string;\n  user: any; \n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiUrl = 'api/auth'; // Replace with your actual API endpoint\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials: any): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials).pipe(\n      tap(response => {\n        localStorage.setItem('token', response.token);\n        this.isLoggedInSubject.next(true);\n      })\n    );\n  }\n\n  register(userData: any): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData);\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.isLoggedInSubject.next(false);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/horario.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorarioService {\n\n  private apiUrl = 'api/horarios'; // Replace with your API URL\n\n  constructor(private http: HttpClient) { }\n\n  getHorarios(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getHorario(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`);\n  }\n\n  createHorario(horario: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, horario);\n  }\n\n  updateHorario(id: number, horario: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, horario);\n  }\n\n  deleteHorario(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`);\n  }\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/services/asistencia.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AsistenciaService {\n\n  private apiUrl = 'api/asistencias'; // Replace with your API URL\n\n  constructor(private http: HttpClient) { }\n\n  getAsistencias(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getAsistencia(id: number): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`);\n  }\n\n  createAsistencia(asistencia: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, asistencia);\n  }\n\n  updateAsistencia(id: number, asistencia: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, asistencia);\n  }\n\n  deleteAsistencia(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`);\n  }\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/guards/auth.guard.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n      return false;\n    }\n  }\n\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/interceptors/auth.interceptor.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n\n    if (token) {\n      const cloned = request.clone({\n        headers: request.headers.set('Authorization', 'Bearer ' + token)\n      });\n\n      return next.handle(cloned);\n    } else {\n      return next.handle(request);\n    }\n  }\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/usuario.model.ts",
                        "content": "export interface Usuario {\n  id: number;\n  nombre: string;\n  email: string;\n  rol: string; // e.g., 'alumno', 'profesor', 'jefeDeGrupo'\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/horario.model.ts",
                        "content": "export interface Horario {\n  id: number;\n  grupo: string;\n  clase: string;\n  horaInicio: string; // Store as string in 'HH:mm' format\n  horaFin: string;   // Store as string in 'HH:mm' format\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/asistencia.model.ts",
                        "content": "export interface Asistencia {\n  id: number;\n  fecha: string; // Store as string in 'YYYY-MM-DD' format\n  presente: boolean;\n  usuarioId: number; // Foreign key to Usuario\n}",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/core/models/actividad.model.ts",
                        "content": "export interface Actividad {\n  id: number;\n  nombre: string;\n  descripcion: string;\n  fecha: string; // Store as string in 'YYYY-MM-DD' format\n}",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "SharedModule",
                "files": [
                    {
                        "path": "src/app/shared/shared.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from './material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CustomErrorComponent } from './components/custom-error/custom-error.component';\n\n\n@NgModule({\n  declarations: [\n    CustomErrorComponent\n  ],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    CommonModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    CustomErrorComponent\n  ]\n})\nexport class SharedModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/material.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n\n@NgModule({\n  exports: [\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class MaterialModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/components/custom-error/custom-error.component.ts",
                        "content": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-custom-error',\n  templateUrl: './custom-error.component.html',\n  styleUrls: ['./custom-error.component.scss']\n})\nexport class CustomErrorComponent {\n  @Input() message: string = 'Ocurrió un error inesperado.';\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/shared/components/custom-error/custom-error.component.html",
                        "content": "<div class=\"error-container\">\n  <p class=\"error-message\">{{ message }}</p>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/shared/components/custom-error/custom-error.component.scss",
                        "content": ".error-container {\n  padding: 16px;\n  background-color: #f8d7da;\n  color: #721c24;\n  border: 1px solid #f5c6cb;\n  border-radius: 4px;\n  margin-bottom: 16px;\n}\n\n.error-message {\n  margin: 0;\n}\n",
                        "type": "scss"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "AuthModule",
                "files": [
                    {
                        "path": "src/app/auth/auth.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../shared/material.module';\nimport { AuthService } from './auth.service';\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent],\n  imports: [CommonModule, AuthRoutingModule, ReactiveFormsModule, MaterialModule],\n  providers: [AuthService]\n})\nexport class AuthModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/auth-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule {}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/login/login.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value).subscribe({\n        next: (response) => {\n          // Store the token or user data\n          localStorage.setItem('token', response.token); // Assuming the API returns a token\n          this.router.navigate(['/horarios']); // Navigate to dashboard or home\n        },\n        error: (error) => {\n          console.error('Login failed', error);\n          // Display error message to the user\n        }\n      });\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/login/login.component.html",
                        "content": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>Login</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\">\n        <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">Email is required</mat-error>\n        <mat-error *ngIf=\"loginForm.get('email')?.hasError('email')\">Invalid email format</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n        <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">Password is required</mat-error>\n      </mat-form-field>\n    </form>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\" [disabled]=\"loginForm.invalid\">Login</button>\n  </mat-card-actions>\n</mat-card>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/auth/login/login.component.scss",
                        "content": ".full-width {\n  width: 100%;\n}\n\nmat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/auth/register/register.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\n    this.registerForm = this.fb.group({\n      nombre: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      this.authService.register(this.registerForm.value).subscribe({\n        next: (response) => {\n          // Optionally store user data or token\n          this.router.navigate(['/login']);\n        },\n        error: (error) => {\n          console.error('Registration failed', error);\n          // Display error message to the user\n        }\n      });\n    }\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/auth/register/register.component.html",
                        "content": "<mat-card>\n  <mat-card-header>\n    <mat-card-title>Register</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n       <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Nombre</mat-label>\n        <input matInput placeholder=\"Nombre\" formControlName=\"nombre\">\n        <mat-error *ngIf=\"registerForm.get('nombre')?.hasError('required')\">Nombre is required</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\">\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('required')\">Email is required</mat-error>\n        <mat-error *ngIf=\"registerForm.get('email')?.hasError('email')\">Invalid email format</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Password</mat-label>\n        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n        <mat-error *ngIf=\"registerForm.get('password')?.hasError('required')\">Password is required</mat-error>\n      </mat-form-field>\n    </form>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\" [disabled]=\"registerForm.invalid\">Register</button>\n  </mat-card-actions>\n</mat-card>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/auth/register/register.component.scss",
                        "content": ".full-width {\n  width: 100%;\n}\n\nmat-card {\n  max-width: 400px;\n  margin: 2em auto;\n  text-align: center;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/auth/auth.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000'; // Replace with your API endpoint\n\n  constructor(private http: HttpClient) {}\n\n  login(credentials: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, credentials);\n  }\n\n  register(userData: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/register`, userData);\n  }\n\n  // Add other authentication related methods here (e.g., logout, reset password, etc.)\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "ProjectsModule",
                "files": [
                    {
                        "path": "src/app/projects/projects.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProjectsRoutingModule } from './projects-routing.module';\nimport { ProjectListComponent } from './components/project-list/project-list.component';\nimport { ProjectDetailComponent } from './components/project-detail/project-detail.component';\nimport { ProjectCreateComponent } from './components/project-create/project-create.component';\nimport { ProjectEditComponent } from './components/project-edit/project-edit.component';\nimport { MaterialModule } from '../shared/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    ProjectListComponent,\n    ProjectDetailComponent,\n    ProjectCreateComponent,\n    ProjectEditComponent\n  ],\n  imports: [\n    CommonModule,\n    ProjectsRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class ProjectsModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/projects-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProjectListComponent } from './components/project-list/project-list.component';\nimport { ProjectDetailComponent } from './components/project-detail/project-detail.component';\nimport { ProjectCreateComponent } from './components/project-create/project-create.component';\nimport { ProjectEditComponent } from './components/project-edit/project-edit.component';\n\nconst routes: Routes = [\n  { path: '', component: ProjectListComponent },\n  { path: 'create', component: ProjectCreateComponent },\n  { path: ':id', component: ProjectDetailComponent },\n  { path: ':id/edit', component: ProjectEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProjectsRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-list/project-list.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ProjectService } from '../../services/project.service';\nimport { Project } from '../../models/project.model';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-project-list',\n  templateUrl: './project-list.component.html',\n  styleUrls: ['./project-list.component.scss']\n})\nexport class ProjectListComponent implements OnInit {\n\n  projects: Project[] = [];\n\n  constructor(private projectService: ProjectService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loadProjects();\n  }\n\n  loadProjects(): void {\n    this.projectService.getProjects().subscribe(projects => {\n      this.projects = projects;\n    });\n  }\n\n  navigateToProject(id: string): void {\n    this.router.navigate(['/projects', id]);\n  }\n\n  deleteProject(id: string): void {\n    if (confirm('Are you sure you want to delete this project?')) {\n      this.projectService.deleteProject(id).subscribe(() => {\n        this.loadProjects();\n      });\n    }\n  }\n\n  createProject(): void {\n    this.router.navigate(['/projects/create']);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-list/project-list.component.html",
                        "content": "<div class=\"container\">\n  <h2>Projects</h2>\n  <button mat-raised-button color=\"primary\" (click)=\"createProject()\">Create Project</button>\n  <table mat-table [dataSource]=\"projects\" class=\"mat-elevation-z8\">\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef> Name </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"primary\" (click)=\"navigateToProject(element.id || '')\">\n          <mat-icon>visibility</mat-icon>\n        </button>\n        <button mat-icon-button color=\"accent\" (click)=\"router.navigate(['/projects', element.id, 'edit'])\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteProject(element.id || '')\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"['name', 'description', 'actions']\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: ['name', 'description', 'actions'];\"></tr>\n  </table>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-list/project-list.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\ntable {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/components/project-detail/project-detail.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProjectService } from '../../services/project.service';\nimport { Project } from '../../models/project.model';\n\n@Component({\n  selector: 'app-project-detail',\n  templateUrl: './project-detail.component.html',\n  styleUrls: ['./project-detail.component.scss']\n})\nexport class ProjectDetailComponent implements OnInit {\n\n  project: Project | undefined;\n\n  constructor(private route: ActivatedRoute, private projectService: ProjectService) { }\n\n  ngOnInit(): void {\n    this.loadProject();\n  }\n\n  loadProject(): void {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      this.projectService.getProject(id).subscribe(project => {\n        this.project = project;\n      });\n    }\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-detail/project-detail.component.html",
                        "content": "<div class=\"container\">\n  <ng-container *ngIf=\"project\">\n    <h2>Project Detail</h2>\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>{{ project.name }}</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <p><strong>Description:</strong> {{ project.description }}</p>\n        <p><strong>Client:</strong> {{ project.client }}</p>\n      </mat-card-content>\n    </mat-card>\n  </ng-container>\n  <ng-container *ngIf=\"!project\">\n    <p>Project not found.</p>\n  </ng-container>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-detail/project-detail.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nmat-card {\n  max-width: 600px;\n  margin: 20px auto;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/components/project-create/project-create.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ProjectService } from '../../services/project.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-project-create',\n  templateUrl: './project-create.component.html',\n  styleUrls: ['./project-create.component.scss']\n})\nexport class ProjectCreateComponent implements OnInit {\n\n  projectForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private projectService: ProjectService, private router: Router) { \n    this.projectForm = this.fb.group({\n      name: ['', Validators.required],\n      description: [''],\n      client: ['']\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(): void {\n    if (this.projectForm.valid) {\n      this.projectService.createProject(this.projectForm.value).subscribe(() => {\n        this.router.navigate(['/projects']);\n      });\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/projects']);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-create/project-create.component.html",
                        "content": "<div class=\"container\">\n  <h2>Create Project</h2>\n  <form [formGroup]=\"projectForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Name</mat-label>\n      <input matInput placeholder=\"Name\" formControlName=\"name\">\n      <mat-error *ngIf=\"projectForm.get('name')?.hasError('required')\">Name is required.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Description</mat-label>\n      <textarea matInput placeholder=\"Description\" formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Client</mat-label>\n      <input matInput placeholder=\"Client\" formControlName=\"client\">\n    </mat-form-field>\n\n    <div>\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"projectForm.invalid\">Create</button>\n      <button mat-button type=\"button\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </form>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-create/project-create.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: 0 auto;\n}\n\nmat-form-field {\n  margin-bottom: 15px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/components/project-edit/project-edit.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ProjectService } from '../../services/project.service';\nimport { Project } from '../../models/project.model';\n\n@Component({\n  selector: 'app-project-edit',\n  templateUrl: './project-edit.component.html',\n  styleUrls: ['./project-edit.component.scss']\n})\nexport class ProjectEditComponent implements OnInit {\n\n  projectId: string | null = null;\n  projectForm: FormGroup;\n  project: Project | undefined;\n\n  constructor(private route: ActivatedRoute, private fb: FormBuilder, private projectService: ProjectService, private router: Router) {\n    this.projectForm = this.fb.group({\n      name: ['', Validators.required],\n      description: [''],\n      client: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.projectId = this.route.snapshot.paramMap.get('id');\n    if (this.projectId) {\n      this.loadProject(this.projectId);\n    }\n  }\n\n  loadProject(id: string): void {\n    this.projectService.getProject(id).subscribe(project => {\n      this.project = project;\n      this.projectForm.patchValue(project);\n    });\n  }\n\n  onSubmit(): void {\n    if (this.projectForm.valid && this.projectId && this.project) {\n      const updatedProject = { ...this.project, ...this.projectForm.value };\n      this.projectService.updateProject(this.projectId, updatedProject).subscribe(() => {\n        this.router.navigate(['/projects']);\n      });\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/projects']);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/components/project-edit/project-edit.component.html",
                        "content": "<div class=\"container\">\n  <h2>Edit Project</h2>\n  <form [formGroup]=\"projectForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Name</mat-label>\n      <input matInput placeholder=\"Name\" formControlName=\"name\">\n      <mat-error *ngIf=\"projectForm.get('name')?.hasError('required')\">Name is required.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Description</mat-label>\n      <textarea matInput placeholder=\"Description\" formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Client</mat-label>\n      <input matInput placeholder=\"Client\" formControlName=\"client\">\n    </mat-form-field>\n\n    <div>\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"projectForm.invalid\">Update</button>\n      <button mat-button type=\"button\" (click)=\"cancel()\">Cancel</button>\n    </div>\n  </form>\n</div>",
                        "type": "html"
                    },
                    {
                        "path": "src/app/projects/components/project-edit/project-edit.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  margin: 0 auto;\n}\n\nmat-form-field {\n  margin-bottom: 15px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/projects/services/project.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Project } from '../models/project.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  private apiUrl = 'api/projects'; // Replace with your actual API endpoint\n\n  constructor(private http: HttpClient) { }\n\n  getProjects(): Observable<Project[]> {\n    return this.http.get<Project[]>(this.apiUrl);\n  }\n\n  getProject(id: string): Observable<Project> {\n    return this.http.get<Project>(`${this.apiUrl}/${id}`);\n  }\n\n  createProject(project: Project): Observable<Project> {\n    return this.http.post<Project>(this.apiUrl, project);\n  }\n\n  updateProject(id: string, project: Project): Observable<Project> {\n    return this.http.put<Project>(`${this.apiUrl}/${id}`, project);\n  }\n\n  deleteProject(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/projects/models/project.model.ts",
                        "content": "export interface Project {\n  id?: string;\n  name: string;\n  description: string;\n  client: string;\n}",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            },
            {
                "name": "TasksModule",
                "files": [
                    {
                        "path": "src/app/tasks/tasks.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TasksRoutingModule } from './tasks-routing.module';\nimport { TaskListComponent } from './task-list/task-list.component';\nimport { TaskDetailComponent } from './task-detail/task-detail.component';\nimport { TaskCreateComponent } from './task-create/task-create.component';\nimport { TaskEditComponent } from './task-edit/task-edit.component';\nimport { MaterialModule } from '../shared/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TaskService } from './task.service';\n\n\n@NgModule({\n  declarations: [\n    TaskListComponent,\n    TaskDetailComponent,\n    TaskCreateComponent,\n    TaskEditComponent\n  ],\n  imports: [\n    CommonModule,\n    TasksRoutingModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ],\n  providers: [TaskService]\n})\nexport class TasksModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/tasks-routing.module.ts",
                        "content": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TaskListComponent } from './task-list/task-list.component';\nimport { TaskDetailComponent } from './task-detail/task-detail.component';\nimport { TaskCreateComponent } from './task-create/task-create.component';\nimport { TaskEditComponent } from './task-edit/task-edit.component';\n\nconst routes: Routes = [\n  { path: '', component: TaskListComponent },\n  { path: 'create', component: TaskCreateComponent },\n  { path: ':id', component: TaskDetailComponent },\n  { path: ':id/edit', component: TaskEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TasksRoutingModule { }\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/task-list/task-list.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})\nexport class TaskListComponent implements OnInit {\n\n  tasks: Task[] = [];\n  displayedColumns: string[] = ['id', 'title', 'description', 'actions'];\n\n  constructor(private taskService: TaskService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loadTasks();\n  }\n\n  loadTasks(): void {\n    this.taskService.getTasks().subscribe(tasks => {\n      this.tasks = tasks;\n    });\n  }\n\n  deleteTask(id: number): void {\n    this.taskService.deleteTask(id).subscribe(() => {\n      this.loadTasks();\n    });\n  }\n\n  editTask(id: number): void {\n    this.router.navigate(['/tasks', id, 'edit']);\n  }\n\n  viewTask(id: number): void {\n    this.router.navigate(['/tasks', id]);\n  }\n\n  createTask(): void {\n    this.router.navigate(['/tasks/create']);\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/task-list/task-list.component.html",
                        "content": "<div class=\"container\">\n  <h2>Tasks</h2>\n  <button mat-raised-button color=\"primary\" (click)=\"createTask()\">Create Task</button>\n  <table mat-table [dataSource]=\"tasks\" class=\"mat-elevation-z8\">\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef> ID </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"title\">\n      <th mat-header-cell *matHeaderCellDef> Title </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.title}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef> Description </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\n      <td mat-cell *matCellDef=\"let element\">\n        <button mat-icon-button color=\"primary\" (click)=\"viewTask(element.id)\">\n          <mat-icon>visibility</mat-icon>\n        </button>\n        <button mat-icon-button color=\"accent\" (click)=\"editTask(element.id)\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-icon-button color=\"warn\" (click)=\"deleteTask(element.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/task-list/task-list.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\ntable {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/task-detail/task-detail.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\n\n@Component({\n  selector: 'app-task-detail',\n  templateUrl: './task-detail.component.html',\n  styleUrls: ['./task-detail.component.scss']\n})\nexport class TaskDetailComponent implements OnInit {\n\n  task: Task | undefined;\n\n  constructor(private route: ActivatedRoute, private taskService: TaskService) { }\n\n  ngOnInit(): void {\n    this.getTask();\n  }\n\n  getTask(): void {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.taskService.getTask(id).subscribe(task => {\n      this.task = task;\n    });\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/task-detail/task-detail.component.html",
                        "content": "<div class=\"container\">\n  <h2>Task Detail</h2>\n  <div *ngIf=\"task\">\n    <p><strong>ID:</strong> {{task.id}}</p>\n    <p><strong>Title:</strong> {{task.title}}</p>\n    <p><strong>Description:</strong> {{task.description}}</p>\n  </div>\n  <div *ngIf=\"!task\">\n    <p>Task not found.</p>\n  </div>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/task-detail/task-detail.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/task-create/task-create.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TaskService } from '../task.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-task-create',\n  templateUrl: './task-create.component.html',\n  styleUrls: ['./task-create.component.scss']\n})\nexport class TaskCreateComponent implements OnInit {\n\n  taskForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private taskService: TaskService, private router: Router) {\n    this.taskForm = this.fb.group({\n      title: ['', Validators.required],\n      description: ['']\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(): void {\n    if (this.taskForm.valid) {\n      this.taskService.createTask(this.taskForm.value).subscribe(() => {\n        this.router.navigate(['/tasks']);\n      });\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/tasks']);\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/task-create/task-create.component.html",
                        "content": "<div class=\"container\">\n  <h2>Create Task</h2>\n  <form [formGroup]=\"taskForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" required>\n      <mat-error *ngIf=\"taskForm.get('title')?.hasError('required')\">Title is required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!taskForm.valid\">Create</button>\n    <button mat-button type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </form>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/task-create/task-create.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nmat-form-field {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/task-edit/task-edit.component.ts",
                        "content": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TaskService } from '../task.service';\nimport { Task } from '../task.model';\n\n@Component({\n  selector: 'app-task-edit',\n  templateUrl: './task-edit.component.html',\n  styleUrls: ['./task-edit.component.scss']\n})\nexport class TaskEditComponent implements OnInit {\n\n  taskId: number | null = null;\n  taskForm: FormGroup;\n\n  constructor(private route: ActivatedRoute, private fb: FormBuilder, private taskService: TaskService, private router: Router) {\n    this.taskForm = this.fb.group({\n      title: ['', Validators.required],\n      description: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.taskId = Number(this.route.snapshot.paramMap.get('id'));\n    this.loadTask();\n  }\n\n  loadTask(): void {\n    if (this.taskId) {\n      this.taskService.getTask(this.taskId).subscribe(task => {\n        this.taskForm.patchValue(task);\n      });\n    }\n  }\n\n  onSubmit(): void {\n    if (this.taskForm.valid && this.taskId) {\n      this.taskService.updateTask(this.taskId, this.taskForm.value).subscribe(() => {\n        this.router.navigate(['/tasks']);\n      });\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['/tasks']);\n  }\n\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/task-edit/task-edit.component.html",
                        "content": "<div class=\"container\">\n  <h2>Edit Task</h2>\n  <form [formGroup]=\"taskForm\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" required>\n      <mat-error *ngIf=\"taskForm.get('title')?.hasError('required')\">Title is required</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!taskForm.valid\">Update</button>\n    <button mat-button type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </form>\n</div>\n",
                        "type": "html"
                    },
                    {
                        "path": "src/app/tasks/task-edit/task-edit.component.scss",
                        "content": ".container {\n  padding: 20px;\n}\n\nmat-form-field {\n  width: 100%;\n}\n",
                        "type": "scss"
                    },
                    {
                        "path": "src/app/tasks/task.model.ts",
                        "content": "export interface Task {\n  id: number;\n  title: string;\n  description: string;\n}\n",
                        "type": "typescript"
                    },
                    {
                        "path": "src/app/tasks/task.service.ts",
                        "content": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Task } from './task.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  private apiUrl = 'api/tasks'; // Replace with your actual API endpoint\n\n  constructor(private http: HttpClient) { }\n\n  getTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(this.apiUrl);\n  }\n\n  getTask(id: number): Observable<Task> {\n    return this.http.get<Task>(`${this.apiUrl}/${id}`);\n  }\n\n  createTask(task: Task): Observable<Task> {\n    return this.http.post<Task>(this.apiUrl, task);\n  }\n\n  updateTask(id: number, task: Task): Observable<Task> {\n    return this.http.put<Task>(`${this.apiUrl}/${id}`, task);\n  }\n\n  deleteTask(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\n",
                        "type": "typescript"
                    }
                ],
                "cliCommands": []
            }
        ],
        "commonFiles": [
            {
                "path": "package.json",
                "content": "{\n  \"name\": \"frontend\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"watch\": \"ng build --watch --configuration development\",\n    \"test\": \"ng test\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^18.0.0\",\n    \"@angular/common\": \"^18.0.0\",\n    \"@angular/compiler\": \"^18.0.0\",\n    \"@angular/core\": \"^18.0.0\",\n    \"@angular/forms\": \"^18.0.0\",\n    \"@angular/platform-browser\": \"^18.0.0\",\n    \"@angular/platform-browser-dynamic\": \"^18.0.0\",\n    \"@angular/router\": \"^18.0.0\",\n    \"rxjs\": \"~7.8.0\",\n    \"tslib\": \"^2.3.0\",\n    \"zone.js\": \"~0.14.0\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^18.0.0\",\n    \"@angular/cli\": \"^18.0.0\",\n    \"@angular/compiler-cli\": \"^18.0.0\",\n    \"@types/jasmine\": \"~4.3.0\",\n    \"jasmine-core\": \"~4.6.0\",\n    \"karma\": \"~6.4.0\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage\": \"~2.2.0\",\n    \"karma-jasmine\": \"~5.1.0\",\n    \"karma-jasmine-html-reporter\": \"~2.1.0\",\n    \"typescript\": \"~5.3.2\"\n  }\n}",
                "type": "json"
            },
            {
                "path": "angular.json",
                "content": "{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"frontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {\n        \"@schematics/angular:component\": {\n          \"style\": \"scss\"\n        }\n      },\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/frontend\",\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": [\"zone.js\"],\n            \"tsConfig\": \"tsconfig.app.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.scss\"],\n            \"scripts\": []\n          },\n          \"configurations\": {\n            \"production\": {\n              \"budgets\": [\n                {\n                  \"type\": \"initial\",\n                  \"maximumWarning\": \"500kb\",\n                  \"maximumError\": \"1mb\"\n                },\n                {\n                  \"type\": \"anyComponentStyle\",\n                  \"maximumWarning\": \"2kb\",\n                  \"maximumError\": \"4kb\"\n                }\n              ],\n              \"outputHashing\": \"all\"\n            },\n            \"development\": {\n              \"buildOptimizer\": false,\n              \"optimization\": false,\n              \"vendorChunk\": true,\n              \"extractLicenses\": false,\n              \"sourceMap\": true,\n              \"namedChunks\": true\n            }\n          },\n          \"defaultConfiguration\": \"production\"\n        },\n        \"serve\": {\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n          \"configurations\": {\n            \"production\": {\n              \"browserTarget\": \"frontend:build:production\"\n            },\n            \"development\": {\n              \"browserTarget\": \"frontend:build:development\"\n            }\n          },\n          \"defaultConfiguration\": \"development\"\n        },\n        \"extract-i18n\": {\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n          \"options\": {\n            \"browserTarget\": \"frontend:build\"\n          }\n        },\n        \"test\": {\n          \"builder\": \"@angular-devkit/build-angular:karma\",\n          \"options\": {\n            \"polyfills\": [\"zone.js\", \"zone.js/testing\"],\n            \"tsConfig\": \"tsconfig.spec.json\",\n            \"inlineStyleLanguage\": \"scss\",\n            \"assets\": [\"src/favicon.ico\", \"src/assets\"],\n            \"styles\": [\"src/styles.scss\"],\n            \"scripts\": []\n          }\n        }\n      }\n    }\n  },\n  \"cli\": {\n    \"analytics\": false\n  }\n}",
                "type": "json"
            },
            {
                "path": "tsconfig.json",
                "content": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"noImplicitOverride\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"downlevelIteration\": true,\n    \"experimentalDecorators\": true,\n    \"moduleResolution\": \"node\",\n    \"importHelpers\": true,\n    \"target\": \"es2022\",\n    \"module\": \"es2022\",\n    \"lib\": [\"es2022\", \"dom\"]\n  },\n  \"angularCompilerOptions\": {\n    \"enableI18nLegacyMessageIdFormat\": false,\n    \"strictInjectionParameters\": true,\n    \"strictInputAccessModifiers\": true,\n    \"strictTemplates\": true\n  }\n}",
                "type": "json"
            },
            {
                "path": "src/index.html",
                "content": "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Frontend</title>\n  <base href=\"/\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n</body>\n</html>",
                "type": "html"
            },
            {
                "path": "src/styles.scss",
                "content": "/* You can add global styles to this file, and also import other style files */\n",
                "type": "scss"
            },
            {
                "path": "src/environments/environment.ts",
                "content": "export const environment = {\n  production: false,\n  apiUrl: 'http://localhost:3000'\n};",
                "type": "typescript"
            },
            {
                "path": "src/environments/environment.prod.ts",
                "content": "export const environment = {\n  production: true,\n  apiUrl: 'https://api.example.com'\n};",
                "type": "typescript"
            }
        ],
        "cliCommands": [
            "npm install",
            "ng add @angular/core@18",
            "ng add @angular/router@18",
            "ng generate component component-name",
            "ng generate service service-name",
            "ng build",
            "ng serve"
        ]
    }
}
