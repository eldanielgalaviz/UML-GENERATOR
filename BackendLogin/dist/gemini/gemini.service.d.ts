export interface DatabaseScripts {
    scripts: string[];
}
import { Response } from 'express';
import { ConfigService } from '@nestjs/config';
import { MermaidDiagram, IEEE830Requirement, AnalysisResponse, GeneratedCode } from './interfaces/code-generation.interface';
export declare class GeminiService {
    private configService;
    private readonly genAI;
    private readonly model;
    private readonly logger;
    private readonly MAX_RETRIES;
    private readonly RETRY_DELAY;
    constructor(configService: ConfigService);
    private delay;
    private retryOperation;
    analyzeRequirements(requirements: string): Promise<AnalysisResponse>;
    private analyzeIEEE830;
    private generateAllDiagrams;
    private generateMermaidDiagram;
    private buildMermaidPrompt;
    private validateMermaidCode;
    private extractMermaidCode;
    private getDiagramTitle;
    generateCode(diagrams: MermaidDiagram[], requirements: IEEE830Requirement[]): Promise<GeneratedCode>;
    private generateBackend;
    private buildBackendBasePrompt;
    private buildBackendModulePrompt;
    private generateFrontend;
    private generateCommonFrontendFile;
    private validateFrontendStructure;
    private validateAppModule;
    private validateCoreModule;
    private buildFrontendBasePrompt;
    private buildFrontendModulePrompt;
    private buildBackendPrompt;
    private buildFrontendPrompt;
    private generateDatabaseScripts;
    private extractEntitiesFromClassDiagram;
    generateProjectZip(generatedCode: GeneratedCode, response: Response): Promise<void>;
    private addFilesToZip;
    private extractScriptName;
    private generateReadme;
    private extractSqlScriptsByFile;
    private generateBasicSqlFromEntities;
    private mapTypeToPostgres;
    private toSnakeCase;
    private getDefaultSqlScripts;
    private extractJsonFromResponse;
    private extractCodeEmergency;
    private extractFrontendModuleNamesFromRequirements;
    private generateDefaultComponentDiagram;
    private generateDefaultClassDiagram;
    private buildSimpleFrontendModulePrompt;
    private generateNewModule;
    private capitalizeFirstLetter;
    private singularize;
    private pluralize;
    private kebabCase;
    private generateBasicModule;
    private validateSharedModule;
    private generateMaterialModuleContent;
    private getModuleBasePath;
}
